pipeline {
  agent any
  parameters {
    string(name : 'BUILD_DOCKER', defaultValue : 'Y', description : 'Enable docker image build')
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '657976307134', description : 'AWS account id')
    string(name : 'ECR_REPO_NAME', defaultValue : 'demo_python', description : 'AWS account id')
    string(name : 'ECR_REPO_TAG', defaultValue : 'latest', description : 'AWS account id')

    string(name : 'TARGET_SVR_USER', defaultValue : 'ubuntu', description : 'TARGET_SVR_USER')
    string(name : 'TARGET_SVR_PATH', defaultValue : '/home/ubuntu/', description : 'TARGET_SVR_PATH')
    string(name : 'TARGET_SVR', defaultValue : '172.31.32.176', description : 'TARGET_SVR')
  }

//   environment {
//   }

 environment {
    REGION = "ap-northeast-2"
    ECR_REPOSITORY = "407019759425.dkr.ecr.ap-northeast-2.amazonaws.com"
    DOCKER_IMAGE = "${ECR_REPOSITORY}/demon:1"
    ECR_DOCKER_TAG = "${params.DOCKER_TAG}"
  }

  stages {
//     stage('Prepare') {
//         steps {
//             echo "Checkout Git Repository"
//             git url: "https://github.com/dev-chulbuji/devops_sample_app_python.git",
//                 branch: "master",
//                 credentialsId: "dev-chulbuji/access_token_jenkins"
//         }
//     }

    stage('============ Build Docker Image ============') {
      when {
        expression {
          return params.BUILD_DOCKER == 'Y'
        }
      }

      steps {
        echo "Current workspace is hrim!! ${env.WORKSPACE}"
        dir("${env.WORKSPACE}") {
             //sh 'docker build -t test:1 .'
             sh 'docker build -t demon .'
//             script {
//                 //app = docker.build("${params.ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/${params.ECR_REPO_NAME}:${params.ECR_REPO_TAG}")
//             }
        }
      }
      post {
        always {
            echo "post stage Docker build success!!!!!"
        }
      }
    }

    stage('============ Run Test Code ============') {

      steps {
        echo "Current workspace is hrim!!!"
        //sh ('docker run --rm test:1')
       // sh('docker run --rm ${DOCKER_IMAGE} /root/.local/bin/pytest -v')

//         sh """#!/bin/bash
//             docker-compose -f docker-compose.yml down;
//            """
//         dir("${env.WORKSPACE}") {
//              sh 'docker build -t test:1 .'
// //             script {
// //                 //app = docker.build("${params.ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/${params.ECR_REPO_NAME}:${params.ECR_REPO_TAG}")
// //             }
//         }
      }
      post {
        always {
            echo "post stage Docker build success!!!!!"
        }
      }
    }

    stage('============ PUSH DOCKER IMAGE!ch@============') {
      when { expression { return true } }
      steps {
        echo "Current workspace is 222hrim!!!"
//         sh'''
//                 aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
//                 docker push 407019759425.dkr.ecr.ap-northeast-2.amazonaws.com/demon:1
//             '''
        sh'''
                aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
                docker push ${DOCKER_IMAGE}
            '''
      }
    }
    stage('============ DEPLOY ===========') {
      when { expression { return true } }
      steps {
        echo "DEPLOY"
        sshagent (credentials: ['aws_ec2_user_ssh']) {
                sh """#!/bin/bash
                    scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
                        deploy/docker-compose.yml \
                        ${params.TARGET_SVR_USER}@${params.TARGET_SVR}:${params.TARGET_SVR_PATH};
                    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
                        ${params.TARGET_SVR_USER}@${params.TARGET_SVR} \
                        'aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}; \
                         export IMAGE=${DOCKER_IMAGE}; \
                         export TAG=1; \
                         docker-compose -f docker-compose.yml down;
                         docker-compose -f docker-compose.yml up -d';
                """
            }
      }
    }


//     stage('============ Run test code ============') {
//         echo "${DOCKER_TAG}Current workspace is hrim!! ${DOCKER_IMAGE}"
//
// //         when { expression { return true } }
// //         steps {
// //             sh('docker run --rm ${DOCKER_IMAGE} /root/.local/bin')
// // //             sh'''
// // //                 aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
// // //                 docker run --rm ${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG} /root/.local/bin/pytest -v
// // //             '''
// //             }
//
//       }


  } //stages


//   stage('Prompt for deploy') {
//         echo "${DOCKER_IMAGE}  ... ${DOCKER_TAG}"
//
//         //when { expression { return true } }
// //         steps {
// //             sh """
// //             export IMAGE=${ECR_DOCKER_IMAGE};
// //             export TAG=${ECR_DOCKER_TAG};
// //             docker-compose -f docker-compose.yml down;
// //             docker-compose -f docker-compose.yml up -d';
// //             """
// //
// //             echo "${DOCKER_IMAGE}  ... ${DOCKER_TAG}"
// //         }
//     }


//   post {
//       always {
//         sh "./deploy/build.sh reset_git_directory ${params.ENV}"
//         sh "./deploy/build.sh clean_unused_docker ${params.ENV}"
//       }
//     }
}