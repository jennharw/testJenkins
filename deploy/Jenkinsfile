pipeline {
  agent any
  parameters {
    string(name : 'BUILD_DOCKER', defaultValue : 'Y', description : 'Enable docker image build')
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '657976307134', description : 'AWS account id')
    string(name : 'ECR_REPO_NAME', defaultValue : 'demo_python', description : 'AWS account id')
    string(name : 'ECR_REPO_TAG', defaultValue : 'latest', description : 'AWS account id')
  }

//   environment {
//   }

  stages {
//     stage('Prepare') {
//         steps {
//             echo "Checkout Git Repository"
//             git url: "https://github.com/dev-chulbuji/devops_sample_app_python.git",
//                 branch: "master",
//                 credentialsId: "dev-chulbuji/access_token_jenkins"
//         }
//     }

    stage('============ Build Docker Image ============') {
      when {
        expression {
          return params.BUILD_DOCKER == 'Y'
        }
      }

      steps {
        echo "Current workspace is hrim!! ${env.WORKSPACE}"
        dir("${env.WORKSPACE}") {
             sh 'docker build -t test:1 .'
//             script {
//                 //app = docker.build("${params.ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/${params.ECR_REPO_NAME}:${params.ECR_REPO_TAG}")
//             }
        }
      }
      post {
        always {
            echo "post stage Docker build success!!!!!"
        }
      }
    }
  }
  stage('============ Run test code ============') {
        when { expression { return true } }
        steps {
            sh('docker run --rm ${DOCKER_IMAGE} /root/.local/bin')
//             sh'''
//                 aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
//                 docker run --rm ${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG} /root/.local/bin/pytest -v
//             '''
        }
  }

  stage('Prompt for deploy') {
        echo "${DOCKER_IMAGE}  ... ${DOCKER_TAG}"

        //when { expression { return true } }
//         steps {
//             sh """
//             export IMAGE=${ECR_DOCKER_IMAGE};
//             export TAG=${ECR_DOCKER_TAG};
//             docker-compose -f docker-compose.yml down;
//             docker-compose -f docker-compose.yml up -d';
//             """
//
//             echo "${DOCKER_IMAGE}  ... ${DOCKER_TAG}"
//         }
    }


//   post {
//       always {
//         sh "./deploy/build.sh reset_git_directory ${params.ENV}"
//         sh "./deploy/build.sh clean_unused_docker ${params.ENV}"
//       }
//     }
}